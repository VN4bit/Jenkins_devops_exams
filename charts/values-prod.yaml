environment: prod
namespace: prod

# Main application deployment configuration
replicaCount: 1

image:
  repository: vn4bit/movie-service  # Default to movie service
  tag: latest
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: LoadBalancer
  port: 80
  targetPort: 8000
  nodePort: 30003

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

resources:
  limits:
    cpu: 200m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

movieService:
  replicaCount: 1
  image:
    repository: vn4bit/movie-service
    tag: latest
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

castService:
  replicaCount: 1
  image:
    repository: vn4bit/cast-service
    tag: latest
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

nginx:
  replicaCount: 1
  resources:
    limits:
      cpu: 100m
      memory: 64Mi
    requests:
      cpu: 50m
      memory: 32Mi
  service:
    type: LoadBalancer

ingress:
  enabled: true
  className: ""
  annotations: {}
  hosts:
    - host: microservice-prod.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 300m
    memory: 256Mi
  requests:
    cpu: 150m
    memory: 128Mi

# Database configuration
database:
  uri: "postgresql://movie_db_username:movie_db_password@movie-db/movie_db_prod"

# Service URLs
services:
  castServiceUrl: "http://cast-service:8000/api/v1/casts/"
